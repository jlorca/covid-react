{"ast":null,"code":"var _jsxFileName = \"/Users/jesuslorcaluque/eclipse-j2ee-workspace/covid/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api/services\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\nimport labels from \"../../labels/labels\";\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]); // the previous line is the equivalent to\n  // state = {\n  //   dailyData: {}\n  // }\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    fetchAPI();\n  }, []); // adding in the useEffect an empty array is like to have a behaviour similar to the componentdidmount: is executed only once.\n\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(data => data.date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: labels.infected,\n        borderColor: \"#3333FF\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: labels.deaths,\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }) : null;\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [labels.infected, labels.recovered, labels.deaths],\n      datasets: [{\n        label: \"People\",\n        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\n        data: [confirmed.value, recovered.value, deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, country ? barChart : lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/jesuslorcaluque/eclipse-j2ee-workspace/covid/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","labels","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","map","date","datasets","label","infected","borderColor","fill","backgroundColor","barChart","value","legend","display","title","text","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api/services\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport styles from \"./Chart.module.css\";\nimport labels from \"../../labels/labels\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n  // the previous line is the equivalent to\n  // state = {\n  //   dailyData: {}\n  // }\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n  // adding in the useEffect an empty array is like to have a behaviour similar to the componentdidmount: is executed only once.\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map((data) => data.date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: labels.infected,\n            borderColor: \"#3333FF\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: labels.deaths,\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [labels.infected, labels.recovered, labels.deaths],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}